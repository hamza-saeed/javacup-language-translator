/*******************************************************
*LPL's language / interpreter definition for JavaCup
*Hamza Saeed
*Date Modified: 04/05/2017
*******************************************************/
import java_cup.runtime.*;

action code {: 
 void pp(Stm s)
{
   if (s instanceof PrintStm)
     {
 	System.out.print("Print(");
        ppe(s.getExp());
        System.out.print(")");
     }
   else if (s instanceof AssignStm)
      {
        System.out.print("Assign(");
        System.out.print(s.getLHS());
        System.out.print(",");
        ppe(s.getRHS());
        System.out.print(")");
      }
   else if (s instanceof CompoundStm)
     {
        System.out.print("Compound(");
        pp(s.get1());
        System.out.print(",");
        pp(s.get2());
        System.out.print(")");
     }
   else
     {
        System.out.println("Error in stm");
     }  
}

//pretty printer
 void ppe(Exp e)
{
        if (e instanceof NumExp)
        {
                System.out.print(e.getInt());
        }

        else if (e instanceof IdExp)
        {
		 System.out.print(e.geteid());		
        }

        else if (e instanceof OpExp)
        {
                ppe(e.getleft());
                if (e.getoper()==1)
                {
	                System.out.print(" AND ");
		}
                else if (e.getoper()==2)
                {
                        System.out.print(" OR ");
        	}
		ppe(e.getright());
        }

        else if (e instanceof UnaryOpExp)
        {
                if (e.getoper()==3)
                {
                        System.out.print(" NOT ");
                }
		ppe(e.getright());	
        }
}


/**** interpStm ****/

/* This method a takes member of the statement class s
and a current table t and returns the table updated by s
(although some statements such as 'print' may not update the table).
It branches depending on what is the outermost constructor of s:
-If s is a print, it prints out the value of the expression using the current Table 
-If s is an assignment, it returns the table value of the method
`update' when called with the current table, the assignment's
LHS, and the value of the RHS calcuated in the current table 
(note evaluating the RHS itself can't change the current table).
-If s is one statement s1 following by another s2, s2 is interpreted
in the table got by interpreting s1 in the current table t.
otherwise we have an error.  
*/

 Table interpStm(Stm s, Table t) {  
   if (s instanceof PrintStm)  
     {  printExp(s.getExp(), t);
        return t;
     }
   else if (s instanceof AssignStm)
        return update(t,s.getLHS(),interpExp(s.getRHS(), t));
   else if (s instanceof CompoundStm)
        return interpStm(s.get2(), interpStm(s.get1(),t));
   else 
        System.out.println("error in stm");
        return t;
  }

/**** interpExp ****/

/* interpExp takes an expression e and a table t and returns the
value of e within the context of t.
-If e is a number return that number.
-If e is an identifier, return the looked up value of id in table t.
-If e is a binary operator expression:
  get the value of the left expression and
  get the value of the right expression 
 return the value of the right and left expressions
 operated on by whatever binary operator we have.
otherwise we have an error */

// for 3 value logic - values are 0 and 1 and 2(?)
 int interpExp(Exp e, Table t) {
 if (e instanceof NumExp)
       return e.getInt();
  else if (e instanceof IdExp)
       return lookup(t,e.geteid());
  else if (e instanceof UnaryOpExp)
  {
	int v1 = interpExp(e.getright(),t);
	
	//deal with NOT first   
	if (e.getoper() == 3)
           {
                if (v1 == 1)
                {
                        return 0;
                }
                else if (v1 == 2)
                {
                        return 2;
                }
                else if (v1 == 0)
                {
                        return 1;
                }
                else
                {
                        return 2;
                }
           }
                else return-1;

  }
  else if (e instanceof OpExp)
         {
            int v1 = interpExp(e.getleft(),t);
            int v2 = interpExp(e.getright(),t);
// deal with AND next:

        if (e.getoper() == 1)
        {
                if ((v1==1)&&(v2==1))
                {
                        return 1;
                }

                else if (((v1 == 2)&&(v2 == 1)) || ((v1 == 1)&&(v2 == 2)) || ((v1 == 2)&&(v2 == 2)))
                {
                        return 2;
                }

                else if (((v1 == 2)&&(v2 == 0)) || ((v1 == 0)&&(v2 == 2)))
                {
                        return 0;
                }
                else return 0;
        }

// now deal with OR:

        else if (e.getoper() == 2)
        {
                if ((v1==0)&&(v2==0))
                {
                        return 0;
                }

                else if (((v1 == 2)&&(v2 == 1)) || ((v1 == 1)&&(v2 == 2)))
                {
                        return 1;
                }
                else if (((v1 == 2)&&(v2 ==2)) || ((v1 == 0)&&(v2 == 2)) || ((v1 == 2)&&(v2 == 0)))
                {
                        return 2;
                }
                 else return 1;
         }
         else return -1;
}
        else throw new Error("Exp not recognised");
}



/**** update ****/

/* constructor for a Table that implements the table
-- it simply adds the pair str, i to the old table t,
where str is the identifier and i the int value. */


 Table update(Table t,String str, int i) {
  return (new Table(str, i, t));}

/* selector for a Table - returns the integer value
associated with key once its found */


 int lookup(Table t, String key) {
  if (key == t.getid()) return t.getint(); 
           else return lookup(t.gettail(),key);
  }


/* This class represents the Store of the program */

class Table {
  String id; int value; Table tail;
  Table(String i, int v, Table t)  {id =i; value=v; tail=t;}

  public String getid() {return id;}
  public int getint() {return value;}
  public Table gettail() {return tail;}
}


void  printExp(Exp exp, Table t) {
              System.out.println(interpExp(exp,t));
  }

/* The following classes represent the syntax classes of
   the language. They have constructirs and accesssors */

abstract class Stm { 
   protected Exp getExp() {return null;}; 
   protected Stm get1() {return null;};
   protected Stm get2() {return null;};
   protected Exp getRHS() {return null;};
   protected String getLHS() {return null;};
}

class CompoundStm extends Stm {
   Stm stm1, stm2;
   CompoundStm(Stm s1, Stm s2) {stm1=s1; stm2=s2;}

   public Stm get1() {return stm1;}
   public Stm get2() {return stm2;}
}

class AssignStm extends Stm {
   String id; Exp exp;
   AssignStm(String i, Exp e) {id=i; exp=e;}
   
   public Exp getRHS() {return exp;}
   public String getLHS() {return id;}
}

class PrintStm extends Stm {
   Exp exp;
   PrintStm(Exp e) {exp=e;}

   public Exp getExp() {return exp;}
}

abstract class Exp {
   protected int getInt() { return 0;};
   protected String geteid() {return null;};
   protected int getoper() {return 0;}
   protected Exp getleft() {return null;}
   protected Exp getright() {return null;}

   }

class IdExp extends Exp {
   String id;
   IdExp(String i) {id=i;}
   public String geteid() {return id;}  
}

class NumExp extends Exp {
   int num;
   NumExp(int n) {num=n;}
   public int getInt() {return num;}
}

class OpExp extends Exp {
   Exp left, right; int oper;
   final static int And=1,Or=2;
   OpExp(Exp l, int o, Exp r) {left=l; oper=o; right=r;}
   public int getoper() {return oper;}
   public Exp getleft() {return left;}
   public Exp getright() {return right;}
}

class UnaryOpExp extends Exp {
   Exp right; int oper;
   final static int Not=3;
   UnaryOpExp(int o, Exp r) {oper = o; right=r;}
   public int getoper() {return oper;}
   public Exp getright() {return right;}
}
           :} ;

parser code {:
  public static void main(String args[]) throws java.io.IOException {
   parser parser_obj = new parser();
   Symbol parse_tree = null;
   try { parse_tree = parser_obj.parse(); }
   catch (Throwable e) {       
	// e.printStackTrace();
	 // throw new Error(e.toString());
 };
}
        :};


init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

terminal           SEMI, AND, OR, NOT;
terminal           LPAREN, RPAREN, ASSIGNS, PRINT;
terminal String    ID;
terminal Integer   INT;

/* Non terminals .. if they have a RESULT then
this result must be typed... */
non terminal Stm stm; 
non terminal Stm writestm; 
non terminal Stm assignstm; 
non terminal Table prog;
non terminal Exp exp;

/* Precedences */
precedence right SEMI;
precedence left AND, OR, NOT;

start with prog;

/* The grammar */

prog ::= stm: s
        {: pp(s); System.out.println();
	 RESULT = interpStm(s,new Table("",0,null));
 :} 
        ;

stm ::= writestm:s  
        {: RESULT = s; :}
        |
        assignstm:s
        {: RESULT = s; :}
        |
        writestm:s1 SEMI stm:s2
        {: RESULT = new CompoundStm(s1,s2); :} 
        |
       assignstm:s1 SEMI stm:s2
        {: RESULT = new CompoundStm(s1,s2); :} 
        ;

writestm ::=
        PRINT LPAREN exp:e RPAREN 
        {: RESULT = new PrintStm(e); :}
        ;

assignstm ::=
        ID:id ASSIGNS exp:e
        {: RESULT = new AssignStm(id,e); :}
           ;

exp      ::= INT:n
              {: RESULT = new NumExp(n.intValue()); :}
              |
              ID:id
              {: RESULT = new IdExp(id);:}
              |
              exp:e1 AND exp:e2
              {: RESULT = new OpExp(e1,OpExp.And,e2); :}
              |
              exp:e1 OR exp:e2
              {:
		 RESULT = new OpExp(e1,OpExp.Or,e2);
	      :}
              |

      	      NOT exp:e1
              {:
	         RESULT = new UnaryOpExp(UnaryOpExp.Not, e1);
	      :}
              |

              LPAREN exp:e RPAREN
              {: RESULT = e; :}
              ;

